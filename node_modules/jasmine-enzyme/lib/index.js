"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _enzymeMatchers = _interopRequireDefault(require("enzyme-matchers"));

var _addMatcher = _interopRequireDefault(require("./addMatcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This source code is licensed under the MIT-style license found in the
 * LICENSE file in the root directory of this source tree. *
 *
 * @providesModule JasmineEnzyme
 * 
 */
function jasmineEnzyme() {
  // Migration step for moving people from jasmine-enzyme
  // to jest-enzyme
  if (typeof jest !== 'undefined') {
    throw new Error(`
      [jasmine-enzyme] The jest usage has been moved to a new package: "jest-enzyme".
      Use that project instead of this. For more information, see: https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jest-enzyme
    `);
  }

  const toJasmineMatcher = matcherFn => (util, customEqualityTesters) => {
    // Convert the equals util from jasmine to share the same interface as jest
    const equals = (actual, expected) => util.equals(actual, expected, customEqualityTesters);

    return {
      compare(...args) {
        const results = matcherFn.call({
          equals
        }, ...args);

        if (results.contextualInformation.actual) {
          results.message += `\n${results.contextualInformation.actual}`;
        }

        if (results.contextualInformation.expected) {
          results.message += `\n${results.contextualInformation.expected}`;
        }

        return results;
      },

      negativeCompare(...args) {
        const results = matcherFn.call({
          equals
        }, ...args);

        if (results.contextualInformation.actual) {
          results.negatedMessage += `\n${results.contextualInformation.actual}`;
        }

        if (results.contextualInformation.expected) {
          results.negatedMessage += `\n${results.contextualInformation.expected}`;
        }

        return {
          pass: !results.pass,
          message: results.negatedMessage
        };
      }

    };
  };

  const matchers = Object.keys(_enzymeMatchers.default);
  matchers.forEach(matcher => {
    (0, _addMatcher.default)({
      [matcher]: toJasmineMatcher(_enzymeMatchers.default[matcher])
    });
  });
} // Also expose enzymeMatchers directly so that the matchers can be added on a per-spec basis
// instead of globally on the jasmine object. This also supports older versions of jasmine where
// jasmine.addMatchers isn't defined and matchers must be added to the spec in a beforeEach().
//
// Add enzymeMatchers as an expando property onto the jasmineEnzyme function for backwards
// compatibility with previous versions of jasmine-enzyme.


jasmineEnzyme.enzymeMatchers = _enzymeMatchers.default;
var _default = jasmineEnzyme;
exports.default = _default;
module.exports = exports.default;